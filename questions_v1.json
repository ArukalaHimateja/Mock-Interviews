{
  "version": "1.4",
  "questions": [
    {
      "id": "ALG-001",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. Assume exactly one valid answer exists and the same element may not be used twice. Indices should be returned in any order.",
      "referenceSolution": "**Key steps**\n1. Use a hash map to store complement indices for O(n) time.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-002",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given a string 's', find the length of the longest substring without repeating characters. Characters are ASCII; return 0 for an empty string.",
      "referenceSolution": "**Key steps**\n1. Sliding window with hash set maintains unique chars.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-003",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "You are given an array of 'k' linked\u2011lists, each sorted in ascending order. Merge all the linked lists into one sorted linked list and return its head. Total nodes \u2264 10\u2075.",
      "referenceSolution": "**Key steps**\n1. Use min\u2011heap to pull smallest head node each step (O(n log k)).\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n log k) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-004",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given two sorted arrays nums1 and nums2 of sizes m and n, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
      "referenceSolution": "**Key steps**\n1. Binary search on smaller array for O(log(min(m,n))).\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(log(m+n)) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-005",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' and an integer 'k', return the k\u1d57\u02b0 largest element in the array. You must solve it without sorting the entire array.",
      "referenceSolution": "**Key steps**\n1. Quickselect partition average O(n) time.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) average using Quickselect solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-006",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums', find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
      "referenceSolution": "**Key steps**\n1. Kadane\u2019s algorithm tracks running sum, O(n).\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-007",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given a string containing only the characters '(', ')', '{', '}', '[', ']', determine if the input string is valid. Open brackets must be closed by the same type of brackets and in the correct order.",
      "referenceSolution": "**Key steps**\n1. Stack push/pop matching brackets.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-008",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' which has been rotated at an unknown pivot and an integer 'target', return the index of 'target' if it exists, otherwise -1. Must run in O(log n) time.",
      "referenceSolution": "**Key steps**\n1. Modified binary search, detect sorted half.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(log n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-009",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an array of meeting time intervals consisting of start and end times [[s1,e1], [s2,e2], ...], return the minimum number of conference rooms required so that all meetings can take place.",
      "referenceSolution": "**Key steps**\n1. Sweep line / min\u2011heap ending times.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n log n) (sort start times or min-heap) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-010",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class with get(key) and put(key, value) methods, both O(1) average time.",
      "referenceSolution": "**Key steps**\n1. Hash map + doubly\u2011linked list for O(1) ops.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(1) average per operation solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-011",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given two equal-length words 'beginWord' and 'endWord', and a dictionary list of 'wordList', return the minimum number of single\u2011letter transformations needed to change beginWord into endWord. Each intermediate word must exist in wordList. If impossible, return 0.",
      "referenceSolution": "**Key steps**\n1. BFS with pre\u2011processed wildcard buckets.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N \u00d7 L) where N = wordList size and L = word length solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-012",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given a reference to a node in a connected undirected graph where each node contains a value and a list of neighbors, deep\u2011copy the entire graph and return the clone of the given node. Ensure no node is cloned more than once.",
      "referenceSolution": "**Key steps**\n1. DFS/BFS with dictionary mapping old\u2192new nodes.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(V + E) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-013",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' and an integer 'k', return the k most frequent elements. The answer may be returned in any order, and the algorithm must be faster than O(n log n).",
      "referenceSolution": "**Key steps**\n1. Bucket sort or min\u2011heap of size k.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N log k) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-014",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "You are given an integer 'numCourses' and a list of prerequisite pairs prereq[i] = [a,b] meaning course 'b' must be taken before course 'a'. Return **true** if it is possible to finish all courses by choosing an order that satisfies every prerequisite; otherwise return **false**.  Constraints: 1\u00a0\u2264\u00a0numCourses\u00a0\u2264\u00a010\u2075, prereq length \u2264 2\u00a0\u00d7\u00a010\u2075.",
      "referenceSolution": "**Key steps**\n1. Topological sort via Kahn\u2019s or DFS.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(V + E) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-015",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums', return the length of the longest strictly increasing subsequence.",
      "referenceSolution": "**Key steps**\n1. Patience sorting with binary search O(n log n).\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N log N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-016",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Design algorithms to serialize a binary tree to a single string and deserialize that string back to the original tree structure. Preserve null nodes so structure is identical after a round\u2011trip.",
      "referenceSolution": "**Key steps**\n1. Preorder traversal with null markers.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-017",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given the root of a Binary Search Tree and two nodes p and q, return their lowest common ancestor (LCA). Assume all node values are unique.",
      "referenceSolution": "**Key steps**\n1. Iterative descent using BST property.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(h) where h is tree height solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-018",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Return the zig\u2011zag level order traversal of the nodes\u2019 values of a binary tree (left\u2192right on one level, right\u2192left on the next, alternating).",
      "referenceSolution": "**Key steps**\n1. BFS with level parity toggle.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-019",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Two non\u2011empty singly\u2011linked lists represent two non\u2011negative integers, with digits stored in **reverse order** (least\u2011significant digit first). Add the numbers and return the sum as a linked list in the same reverse format. Each list node contains a single digit; the input numbers do not contain leading zeros.",
      "referenceSolution": "**Key steps**\n1. Iterate lists summing digits carry.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-020",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given the head of a linked list, reverse the nodes of the list in groups of **k** and return the modified list. If the number of nodes is not a multiple of **k**, leave the remaining nodes in their original order. Use only constant extra space and do not alter node values.",
      "referenceSolution": "**Key steps**\n1. Iteratively reverse k nodes using pointers.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-021",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given preorder and inorder traversal arrays of a binary tree with unique values, build and return the binary tree.",
      "referenceSolution": "**Key steps**\n1. Recursion with hashmap for index lookup.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-022",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Design a Trie supporting insert(word), search(word), and startsWith(prefix). All operations must run in O(L) where L is the input string length.",
      "referenceSolution": "**Key steps**\n1. Tree of char nodes with insert/search startsWith.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(L) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-023",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Implement a data structure that supports adding integers to a data stream and returning the median of all elements in O(1) average time per query.",
      "referenceSolution": "**Key steps**\n1. Two heaps (low max\u2011heap, high min\u2011heap).\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(log N) insertion; O(1) median solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-024",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given a 0\u20111 matrix, find the area of the largest rectangle containing only 1\u2019s.",
      "referenceSolution": "**Key steps**\n1. Histograms per row + stack.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(R \u00d7 C) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-025",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' and a window size 'k', return an array of the maximum value in each window as it slides from left to right.",
      "referenceSolution": "**Key steps**\n1. Deque storing monotonically decreasing indices.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-026",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' and an integer 'k', return the total number of continuous subarrays whose sum equals k.",
      "referenceSolution": "**Key steps**\n1. Prefix sum hash map.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-027",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an array of intervals where intervals[i] = [start, end], merge all overlapping intervals and return an array of the non\u2011overlapping intervals.",
      "referenceSolution": "**Key steps**\n1. Sort intervals then merge overlaps linearly.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N log N) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-028",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given a string 's', return the longest palindromic substring in s.",
      "referenceSolution": "**Key steps**\n1. Expand\u2011around\u2011center or Manacher\u2019s.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N) using Manacher\u2019s algorithm solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-029",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an array of points where points[i] = [xi, yi] representing points on a 2\u2011D plane, return the k closest points to the origin (0,0) measured by Euclidean distance.",
      "referenceSolution": "**Key steps**\n1. Max\u2011heap of size k or quickselect.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(N log k) solution.",
          "poor": "Uses a clearly sub\u2011optimal approach (e.g., unnecessary nested loops)."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "ALG-030",
      "category": "algorithms",
      "difficulty": "medium",
      "prompt": "Given an integer array 'nums' where each element represents the maximum jump length from that position, return true if you can reach the last index starting at index 0; else false.",
      "referenceSolution": "**Key steps**\n1. Greedy maintain farthest reachable index.\n2. Discuss edge cases such as empty input.\n3. Provide complexity analysis.\n",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Handles edge cases; passes all unit tests including empty input and large datasets.",
          "poor": "Fails basic test cases or unhandled null inputs."
        },
        {
          "criterion": "time_complexity",
          "weight": 0.3,
          "excellent": "Explains and implements optimal O(n) solution.",
          "poor": "Provides sub\u2011optimal asymptotic complexity or fails to justify it."
        },
        {
          "criterion": "space_complexity",
          "weight": 0.1,
          "excellent": "Keeps auxiliary space minimal / in\u2011place where possible.",
          "poor": "Allocates unbounded collections or copies input needlessly."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable identifiers, modular functions, unit tests included.",
          "poor": "Monolithic code, cryptic variable names."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clearly walks through approach before coding, narrates rationale.",
          "poor": "Silent coding with no explanation."
        }
      ]
    },
    {
      "id": "SYS-001",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a URL shortener like bit.ly  \nAssume peak 1\u202fB requests/day and 50\u202fM new URLs/day.",
      "referenceSolution": "Outline components: API, hash generator, DB storing mappings, caching, redirect service, analytics. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-002",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design Pastebin  \nAssume 5\u202fM pastes/day, average size 1\u202fKB, public pastes expire after 1\u202fyear.",
      "referenceSolution": "Text storage, unique URL, DB vs blob, syntax highlight, expiration, abuse mitigation. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-003",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design Uber ride matching service  \nSize: 3\u202fM concurrent riders, 1\u202fM drivers, 10\u202fK ride requests/sec globally.",
      "referenceSolution": "Microservices: dispatch, geohash driver locations, Kafka streams, ETA calc. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-004",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design Twitter timeline  \nAssume 200\u202fM daily active users, 5\u202fK tweets/sec inbound.",
      "referenceSolution": "Fan\u2011out vs pull, caching, user graph sharding. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-005",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design scalable chat service (WhatsApp)  \nTarget 100\u202fM concurrent connections with 20\u202fB messages/day.",
      "referenceSolution": "WebSocket gateways, message queues, persistence, offline storage. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-006",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design IoT telemetry pipeline (150K msgs/sec)  \nSustained 150\u202fK msg/sec ingest, events are JSON ~200\u202fbytes.",
      "referenceSolution": "MQTT brokers, Kafka ingestion, time\u2011series DB, processing workers. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-007",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design Dropbox file storage  \n100\u202fPB total storage, 1\u202fM file uploads/sec at peak.",
      "referenceSolution": "Chunking, metadata store, S3, deduplication, sync protocol. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-008",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design video streaming platform  \nSupport 4\u202fK streaming for 50\u202fM concurrent viewers.",
      "referenceSolution": "Upload service, transcoding pipeline, CDN, adaptive bitrate. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-009",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a real\u2011time product recommendation service for an e\u2011commerce platform with **10\u202fM daily active users** and **5\u202fk user interaction events per second**. System should generate top\u2011N personalized suggestions within 200\u202fms, handle cold\u2011start users, and support A/B testing of ranking models.",
      "referenceSolution": "Batch/stream features, candidate generation, ranking ML, feature store. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-010",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design API rate limiter  \nEnforce 1000 requests/min per user; 200\u202fK active users.",
      "referenceSolution": "Token bucket per key using Redis. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-011",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design the backend architecture for a real\u2011time multiplayer mobile game that supports **200\u202fk concurrent players**, matchmaking in < 3\u202fs, and authoritative game state updates at 20\u202fHz with latency \u2264 100\u202fms between continents. Include account services, session management, and scaling.",
      "referenceSolution": "State synchronization, matchmaking, authoritative physics server. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-012",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a web\u2011based collaborative rich\u2011text editor that allows thousands of users to edit the same document simultaneously. Assume **250\u202fk active users**, peak **5\u202fk edits/sec** per doc. Discuss concurrency control (OT or CRDT), cursor presence, offline sync, and version history.",
      "referenceSolution": "Operational transforms/CRDT, presence, conflict resolution. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-013",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Architect a centralized logging platform that collects application logs from **50\u202fk microservice instances**, ingests **2\u202fTB data/day**, supports full\u2011text search in < 2\u202fs, and retains logs for 30\u00a0days with tiered storage. Address schema, indexing, and alerting.",
      "referenceSolution": "Log collectors, Elasticsearch, Kibana dashboards, retention. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-014",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design an autocomplete service that serves suggestions for **100\u202fM queries/day**. Typeahead latency must be <\u00a050\u202fms and ranked by popularity + personalization. Address prefix lookup data structures, caching, and freshness of new terms.",
      "referenceSolution": "Prefix trie in memory, ML ranking, caching. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-015",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a notification system that can fan\u2011out messages via email, SMS, and push to **75\u202fM users**, guaranteeing at\u2011least\u2011once delivery, user\u2011specific preferences, and retries with exponential back\u2011off. Peak throughput: **1\u202fM notifications/min**.",
      "referenceSolution": "Fan\u2011out email/push/SMS, retries, user preferences. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-016",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Model an object\u2011oriented parking lot management system supporting multiple floors, different vehicle types, dynamic pricing, and online reservations. Focus on class design plus APIs to enter/exit vehicles, assign spots, and calculate fees.",
      "referenceSolution": "Classes for Vehicle, Slot, Ticket; price calc. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-017",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design the core of an airline reservation system that handles seat inventory across **500 aircraft**, processes **3\u202fk bookings/sec**, prevents double\u2011booking, and supports 24\u2011hour free cancellations. Discuss data consistency, idempotent payment, and GDS integration.",
      "referenceSolution": "Seat inventory service, payment, global distribution, eventual consistency. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-018",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a PCI\u2011compliant payment gateway capable of handling **10\u202fk transactions/sec** with 99.999% availability. Address idempotency keys, fraud detection pipeline, funds settlement, and dispute management.",
      "referenceSolution": "PCI compliance, idempotency, ledger, fraud detection. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-019",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a CDN that serves static and streaming content to a global audience with **50\u202fTbps peak bandwidth**. Cover edge POP placement, cache hierarchy, request routing, and cache invalidation strategies.",
      "referenceSolution": "Edge pops, origin shield, cache invalidation. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "SYS-020",
      "category": "system_design",
      "difficulty": "hard",
      "prompt": "Design a warehouse inventory system that tracks **10\u202fM SKUs** across multiple locations, ingests **100\u202fk RFID scans/min**, and provides real\u2011time stock visibility for order fulfillment. Include event sourcing, reconciliation, and picking optimization.",
      "referenceSolution": "RFID scanning, event sourcing, stock vs orders projections. - High\u2011level architecture diagram: clients \u2192 API gateway \u2192 microservices \u2192 DB/cache. - Calculate throughput / storage based on load; justify shard & replica counts. - Address CAP trade\u2011offs, consistency strategy, and disaster recovery plan.",
      "rubric": [
        {
          "criterion": "architecture",
          "weight": 0.3,
          "excellent": "Presents clear high\u2011level diagram including major components, APIs, data flow.",
          "poor": "Jumps into details without cohesive architecture."
        },
        {
          "criterion": "scalability",
          "weight": 0.2,
          "excellent": "Identifies expected load, calculates QPS, proposes horizontal scaling & caching.",
          "poor": "Ignores traffic growth, single\u2011instance mindset."
        },
        {
          "criterion": "data_consistency",
          "weight": 0.2,
          "excellent": "Chooses appropriate storage, explains consistency vs availability trade\u2011offs.",
          "poor": "No mention of data model or consistency."
        },
        {
          "criterion": "fault_tolerance",
          "weight": 0.2,
          "excellent": "Addresses replication, retries, monitoring, graceful degradation.",
          "poor": "System has single points of failure."
        },
        {
          "criterion": "tradeoffs",
          "weight": 0.1,
          "excellent": "Compares alternatives, justifies decisions under constraints.",
          "poor": "Presents one design as only option."
        }
      ]
    },
    {
      "id": "DOT-001",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, compare `IEnumerable<T>` and `IQueryable<T>`. Explain execution timing, deferred vs immediate evaluation, and how `IQueryable` builds expression trees for providers like Entity Framework to translate into SQL. Provide a concise C# code snippet illustrating server\u2011side filtering with `IQueryable` and client\u2011side filtering with `IEnumerable`.",
      "referenceSolution": "IEnumerable executes in\u2011memory; IQueryable builds expression trees executed by provider (e.g., EF) enabling deferred, server\u2011side queries.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-002",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Explain async/await state machine**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Compiler transforms async method into state machine struct capturing context to resume upon awaited Task completion.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-003",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **How does .NET garbage collector work?**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Generational GC with mark\u2011and\u2011sweep/compact, 0/1/2 generations, LOH, background/ephemeral collections. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-004",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Dependency Injection in ASP.NET Core**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Built\u2011in IoC container registers services with lifetimes (Transient/Scoped/Singleton) injected via constructor. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-005",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Use cases of yield return**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Creates iterator state machine, enables lazy evaluation without allocating full collection. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-006",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Covariance and contravariance in generics**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "out T allows covariance for return types; in T contravariance for params. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-007",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Task vs ValueTask vs Thread**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Task represents async operation, can wrap ThreadPool; ValueTask avoids allocation for sync results; Thread is actual OS thread.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-008",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Explain Span<T> / Memory<T>**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Stack\u2011only, memory\u2011safe view over contiguous memory; zero\u2011copy slicing for performance. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-009",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Difference between record and class**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Record provides value\u2011based equality, immutability, with\u2011expressions, deconstruction. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-010",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **ASP.NET Core middleware pipeline**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Request delegates executed sequentially; can short\u2011circuit; built via app.Use/Run. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-011",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **Entity tracking in EF Core**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "ChangeTracker monitors entity states Added/Modified/etc., generates SQL on SaveChanges. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-012",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **CancellationToken usage**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Propagates cancellation across async operations, register callbacks. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-013",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **ref vs out parameters**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Both pass by reference; ref requires initialized, out must be assigned before return. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-014",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **.NET JIT optimizations**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Tiered compilation, inlining, loop unrolling, PGO in .NET 8. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "DOT-015",
      "category": "dotnet",
      "difficulty": "medium",
      "prompt": "In .NET, explain the concept of **IDisposable pattern best practices**. Include a concise code sample demonstrating typical usage and discuss common pitfalls.",
      "referenceSolution": "Implement Dispose(bool) pattern, suppress finalization, use IAsyncDisposable for async cleanup. - Show idiomatic sample code snippet in C#. - Mention common pitfalls and performance considerations.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Gives accurate technical explanation with example code.",
          "poor": "States factually incorrect information."
        },
        {
          "criterion": "depth_of_explanation",
          "weight": 0.3,
          "excellent": "Demonstrates deep understanding of CLR internals or language feature.",
          "poor": "Superficial answer."
        },
        {
          "criterion": "practical_examples",
          "weight": 0.1,
          "excellent": "Relates concept to real\u2011world .NET project usage.",
          "poor": "No example usage."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Sample code is idiomatic and concise.",
          "poor": "Uncompilable or anti\u2011patterns."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Structured, uses terminology correctly.",
          "poor": "Rambling or confusing."
        }
      ]
    },
    {
      "id": "SQL-001",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **INNER JOIN vs LEFT JOIN**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "INNER returns matching rows; LEFT includes unmatched from left table; use based on need. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-002",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Second highest salary per department**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Use ROW_NUMBER() partitioned by dept ordered DESC and filter RowNumber = 2. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-003",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Normalization forms**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "1NF eliminates repeating groups, 2NF removes partial dependencies, 3NF eliminates transitive. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-004",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **ACID properties**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Atomicity, Consistency, Isolation, Durability ensure reliable transactions. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-005",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Slowly Changing Dimension Type 2**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Keep history by inserting new row with surrogate key and effective dates. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-006",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Clustered vs Non\u2011clustered index**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Clustered sorts physical data; only one; Non\u2011clustered separate structure pointing to rows. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-007",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Detect and resolve deadlocks**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Use DMVs to find blocking sessions; design consistent lock order, lower isolation, retry logic. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-008",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Window functions**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "OVER clause for ranking, aggregates without collapsing rows. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-009",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Partitioning vs Sharding**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Partitioning splits table within DB; sharding distributes across servers. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-010",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Running total query**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "SUM(amount) OVER (ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW). - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-011",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **OLTP vs OLAP**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "OLTP: transactional, normalized; OLAP: analytical, denormalized. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-012",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Change Data Capture (CDC)**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "SQL Server feature records insert/update/delete to capture incremental changes. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-013",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **CAP theorem**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Consistency, Availability, Partition tolerance; trade\u2011offs in distributed systems. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-014",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Design ETL 1TB daily**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Ingest via batch pipeline, parallelization, staging, partitioning, incremental loads. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "SQL-015",
      "category": "sql",
      "difficulty": "medium",
      "prompt": "In relational databases, explain **Pivot rows to columns**. Provide an example SQL snippet and mention performance considerations.",
      "referenceSolution": "Use PIVOT operator or conditional aggregation with CASE. - Provide example SQL demonstrating the concept and index usage. - Highlight performance tuning and edge cases with NULLs.",
      "rubric": [
        {
          "criterion": "correctness",
          "weight": 0.4,
          "excellent": "Returns right results, handles NULLs, duplicates.",
          "poor": "Incorrect query or syntax errors."
        },
        {
          "criterion": "performance",
          "weight": 0.2,
          "excellent": "Uses proper indexes, avoids full scans where avoidable.",
          "poor": "Inefficient plan/ Cartesian joins."
        },
        {
          "criterion": "data_modeling",
          "weight": 0.2,
          "excellent": "Shows understanding of schema design & normalization.",
          "poor": "Ignores data integrity."
        },
        {
          "criterion": "code_quality",
          "weight": 0.1,
          "excellent": "Readable aliases, CTEs, comments.",
          "poor": "Obscure or redundant SQL."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Explains step by step; references execution plan.",
          "poor": "No explanation."
        }
      ]
    },
    {
      "id": "BEH-001",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Disagreed with a team decision**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Disagreed with a team decision** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-002",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Led team through tight deadline**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Led team through tight deadline** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-003",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Handled project failure**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Handled project failure** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-004",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Mentored junior engineer**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Mentored junior engineer** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-005",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Resolved conflict between peers**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Resolved conflict between peers** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-006",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Managed ambiguous requirements**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Managed ambiguous requirements** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-007",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Prioritized tasks with limited resources**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Prioritized tasks with limited resources** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-008",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Introduced innovative solution**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Introduced innovative solution** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-009",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Influenced without authority**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Influenced without authority** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-010",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Improved a process**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Improved a process** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-011",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Faced ethical dilemma**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Faced ethical dilemma** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-012",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Balanced quality and speed**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Balanced quality and speed** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-013",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Decision with incomplete data**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Decision with incomplete data** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-014",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Received critical feedback**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Received critical feedback** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-015",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Cross\u2011functional collaboration**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Cross\u2011functional collaboration** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-016",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Led change initiative**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Led change initiative** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-017",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Motivated team morale**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Motivated team morale** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-018",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Negotiated scope with PM**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Negotiated scope with PM** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-019",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Worked in diverse team**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Worked in diverse team** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "BEH-020",
      "category": "behavioral",
      "difficulty": "easy",
      "prompt": "Tell me about a time you **Kept team updated with new tech**. Use the STAR framework (Situation, Task, Action, Result).",
      "referenceSolution": "\u2022 **Situation:** Faced a time when I **Kept team updated with new tech** while leading a cross\u2011functional team.<br>\n\u2022 **Action:** Gathered data, aligned stakeholders, and executed a clear plan with proactive communication.<br>\n\u2022 **Result:** Delivered 15% faster release and improved team satisfaction score by 20%.<br>\n\u2022 **Reflection:** Learned to balance empathy with assertiveness and now mentor others on conflict resolution.\n",
      "rubric": [
        {
          "criterion": "situation_task",
          "weight": 0.2,
          "excellent": "Sets concise context incl. team, objective, constraints.",
          "poor": "Vague or missing context."
        },
        {
          "criterion": "actions",
          "weight": 0.3,
          "excellent": "Describes specific, proactive steps taken personally.",
          "poor": "Speaks only about team, not personal contribution."
        },
        {
          "criterion": "results",
          "weight": 0.3,
          "excellent": "Quantifies impact (e.g., 25% faster release).",
          "poor": "No clear outcome or metrics."
        },
        {
          "criterion": "reflection",
          "weight": 0.2,
          "excellent": "Shares lesson learned & how applied later.",
          "poor": "No reflection."
        }
      ]
    },
    {
      "id": "DEV-001",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Continuous Integration** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Automated build & test on every commit to detect issues early. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-002",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Blue\u2011green deployment** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Maintain two production environments; switch traffic for zero\u2011downtime releases. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-003",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Unit testing DB access code** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Use repository pattern with in\u2011memory DB or mocks. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-004",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Mocks vs Stubs** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Mocks assert interactions; stubs provide canned responses. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-005",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Containerization & Docker** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Package app with dependencies for portability, isolation. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-006",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Infrastructure as Code** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Provision cloud resources via scripts e.g., Terraform, ARM. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-007",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Canary release** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Gradually roll out to subset users, monitor before full rollout. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-008",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Test\u2011driven development** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Write failing test first, then code to pass, refactor. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-009",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Monitoring in production** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "Use metrics, logs, tracing, alerts; tools Grafana, Prometheus. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    },
    {
      "id": "DEV-010",
      "category": "devops",
      "difficulty": "easy",
      "prompt": "Define **Semantic versioning** in a software delivery context. Describe when you would apply it in a CI/CD pipeline and list one tool that supports it.",
      "referenceSolution": "MAJOR.MINOR.PATCH reflects breaking changes, features, fixes. - Describe relevant CLI command or YAML snippet. - Note rollback strategy and monitoring hooks.",
      "rubric": [
        {
          "criterion": "concept_understanding",
          "weight": 0.3,
          "excellent": "Explains concept accurately incl. purpose & benefits.",
          "poor": "Misconceptions or buzzwords only."
        },
        {
          "criterion": "practical_application",
          "weight": 0.3,
          "excellent": "Describes implementation steps / commands.",
          "poor": "No idea how to apply."
        },
        {
          "criterion": "tooling",
          "weight": 0.2,
          "excellent": "Mentions appropriate tools (e.g., Docker, GitHub Actions).",
          "poor": "No concrete tools."
        },
        {
          "criterion": "best_practices",
          "weight": 0.1,
          "excellent": "Discusses security, rollback, version control.",
          "poor": "Ignores risks, shortcuts processes."
        },
        {
          "criterion": "communication",
          "weight": 0.1,
          "excellent": "Clear, structured answer.",
          "poor": "Disorganized explanation."
        }
      ]
    }
  ]
}